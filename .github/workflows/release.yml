name: Build and Release Chrome Extension

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build extension
        run: npm run build:zip

      - name: Read version from manifest.json
        id: get_version
        run: |
          VERSION=$(jq -r .version manifest.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: chrome-extension
          path: ./dist/chrome/key-prompt-${{ env.VERSION }}.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: chrome-extension

      - name: Set up Node.js for changelog
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install auto-changelog
        run: npm install -g auto-changelog

      - name: Generate changelog
        run: |
          auto-changelog --unreleased --stdout > CHANGELOG.md
          
      - name: Configure git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Create new tag
        env:
          GH_TOKEN: ${{ secrets.KEY_PROMPT_GITHUB_TOKEN }}
        run: |
          git tag -a v${{ needs.build.outputs.version }} -m "Release version ${{ needs.build.outputs.version }}"
          git push https://x-access-token:${{ secrets.KEY_PROMPT_GITHUB_TOKEN }}@github.com/OSpoon/key-prompt.git v${{ needs.build.outputs.version }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.KEY_PROMPT_GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.version }}
          release_name: Release ${{ needs.build.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.KEY_PROMPT_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./key-prompt-${{ needs.build.outputs.version }}.zip
          asset_name: key-prompt-${{ needs.build.outputs.version }}.zip
          asset_content_type: application/zip